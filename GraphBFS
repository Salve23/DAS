import java.util.*;
import java.io.*;

class GraphBFS {
    int V;
    LinkedList<Integer> adj[];
    Queue<Integer> q;

    GraphBFS(int V) {
        this.V = V;
        adj = new LinkedList[V];
        for (int i = 0; i < V; i++)
            adj[i] = new LinkedList<>();
        q = new LinkedList<>();
    }

    void edge(int V, int W) {
        adj[V].add(W);
    }

    void BFS(int a) {
        boolean nodes[] = new boolean[V];
        int x;
        nodes[a] = true;
        q.add(a);

        while (q.size() != 0) {
            a = q.poll();
            System.out.println(a + " ");

            for (int i = 0; i < adj[a].size(); i++) {
                x = adj[a].get(i);
                if (!nodes[x]) {
                    nodes[x] = true;
                    q.add(x);
                }
            }
        }
    }

    public static void main(String[] args) {
        GraphBFS g = new GraphBFS(5);
        g.edge(0, 1);
        g.edge(0, 4);
        g.edge(3, 1);
        g.edge(4, 1);
        g.edge(2, 3);
        g.edge(4, 3);
        g.edge(1, 2);
        g.edge(2, 4);

        g.BFS(0);
    }
}
