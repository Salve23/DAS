import java.util.Scanner;
class Kruskals {
    static int v = 5;  
    static int[] parent = new int[v]; 
    static int find(int i) {
        if (parent[i] == i) {  
            return i;
        }
        return parent[i] = find(parent[i]);
    }
    static void union(int i, int j) {
        int a = find(i);  
        int b = find(j);
        parent[a] = b; 
    }
    static void kruskals(int[][] cost) {
        int sum = 0; 
        for (int i = 0; i < v; i++) {
            parent[i] = i;
        }
        int edgeCnt = 0;
        while (edgeCnt < v - 1) {
            int min = Integer.MAX_VALUE; 
            int x = -1, y = -1;  
            for (int i = 0; i < v; i++) {
                for (int j = 0; j < v; j++) {
                    if (find(i) != find(j) && cost[i][j] < min && cost[i][j] != 0) {
                        min = cost[i][j]; 
                        x = i; 
                        y = j; 
                    }
                }
            }
            if (x != -1 && y != -1) {
                union(x, y);
                edgeCnt++;
                sum += min;
                System.out.println("Edge included: (" + x + ", " + y + ") with weight: " + min);
            }
        }
        System.out.println("Minimum cost: " + sum);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of vertices:");
        v = sc.nextInt();
        int[][] cost = new int[v][v];
        parent = new int[v];
        for (int i = 0; i < v; i++) {
            for (int j = 0; j < v; j++) {
                System.out.println("Enter the cost between vertex " + i + " and vertex " + j + " (enter 'INF' for infinity):");
                String input = sc.next();
                if (input.equals("INF")) {
                    cost[i][j] = Integer.MAX_VALUE; 
                } else {
                    cost[i][j] = Integer.parseInt(input);
                }
            }
        }
        kruskals(cost);  
    }
}
