import java.io.*;
import java.util.*;
import java.util.LinkedList;

class GraphDFS
{
    int v;
    LinkedList<Integer> adj[];
    Stack<Integer> stack;

    GraphDFS(int v)
    {
        this.v = v;
        adj = new LinkedList[v];
        for (int i = 0; i < v; i++)
        {
            adj[i] = new LinkedList<>();
        }
        stack = new Stack<>();
    }

    public void edge(int v, int w)
    {
        adj[v].add(w);
    }

    public void DFS(int start)
    {
        boolean[] visited = new boolean[v];
        stack.push(start);

        while (!stack.isEmpty())
        {
            int node = stack.pop();
            if (!visited[node])
            {
                visited[node] = true;
                System.out.println("Element visited is : " + node);

                for (int i = adj[node].size() - 1; i >= 0; i--)
                {
                    int neighbor = adj[node].get(i);
                    if (!visited[neighbor])
                    {
                        stack.push(neighbor);
                    }
                }
            }
        }
    }

    public static void main(String[] args)
    {
        GraphDFS g = new GraphDFS(5);
        g.edge(0, 1);
        g.edge(0, 2);
        g.edge(0, 4);
        g.edge(1, 2);
        g.edge(4, 2);
        g.edge(2, 3);
        g.edge(4, 3);
        g.DFS(0);
    }
}
